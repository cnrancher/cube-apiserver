/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cnrancher/cube-apiserver/k8s/pkg/apis/cube/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LocalConfigLister helps list LocalConfigs.
type LocalConfigLister interface {
	// List lists all LocalConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LocalConfig, err error)
	// LocalConfigs returns an object that can list and get LocalConfigs.
	LocalConfigs(namespace string) LocalConfigNamespaceLister
	LocalConfigListerExpansion
}

// localConfigLister implements the LocalConfigLister interface.
type localConfigLister struct {
	indexer cache.Indexer
}

// NewLocalConfigLister returns a new LocalConfigLister.
func NewLocalConfigLister(indexer cache.Indexer) LocalConfigLister {
	return &localConfigLister{indexer: indexer}
}

// List lists all LocalConfigs in the indexer.
func (s *localConfigLister) List(selector labels.Selector) (ret []*v1alpha1.LocalConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocalConfig))
	})
	return ret, err
}

// LocalConfigs returns an object that can list and get LocalConfigs.
func (s *localConfigLister) LocalConfigs(namespace string) LocalConfigNamespaceLister {
	return localConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LocalConfigNamespaceLister helps list and get LocalConfigs.
type LocalConfigNamespaceLister interface {
	// List lists all LocalConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LocalConfig, err error)
	// Get retrieves the LocalConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LocalConfig, error)
	LocalConfigNamespaceListerExpansion
}

// localConfigNamespaceLister implements the LocalConfigNamespaceLister
// interface.
type localConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LocalConfigs in the indexer for a given namespace.
func (s localConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LocalConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocalConfig))
	})
	return ret, err
}

// Get retrieves the LocalConfig from the indexer for a given namespace and name.
func (s localConfigNamespaceLister) Get(name string) (*v1alpha1.LocalConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("localconfig"), name)
	}
	return obj.(*v1alpha1.LocalConfig), nil
}
