/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cnrancher/cube-apiserver/k8s/pkg/apis/cube/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrincipalLister helps list Principals.
type PrincipalLister interface {
	// List lists all Principals in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Principal, err error)
	// Principals returns an object that can list and get Principals.
	Principals(namespace string) PrincipalNamespaceLister
	PrincipalListerExpansion
}

// principalLister implements the PrincipalLister interface.
type principalLister struct {
	indexer cache.Indexer
}

// NewPrincipalLister returns a new PrincipalLister.
func NewPrincipalLister(indexer cache.Indexer) PrincipalLister {
	return &principalLister{indexer: indexer}
}

// List lists all Principals in the indexer.
func (s *principalLister) List(selector labels.Selector) (ret []*v1alpha1.Principal, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Principal))
	})
	return ret, err
}

// Principals returns an object that can list and get Principals.
func (s *principalLister) Principals(namespace string) PrincipalNamespaceLister {
	return principalNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrincipalNamespaceLister helps list and get Principals.
type PrincipalNamespaceLister interface {
	// List lists all Principals in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Principal, err error)
	// Get retrieves the Principal from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Principal, error)
	PrincipalNamespaceListerExpansion
}

// principalNamespaceLister implements the PrincipalNamespaceLister
// interface.
type principalNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Principals in the indexer for a given namespace.
func (s principalNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Principal, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Principal))
	})
	return ret, err
}

// Get retrieves the Principal from the indexer for a given namespace and name.
func (s principalNamespaceLister) Get(name string) (*v1alpha1.Principal, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("principal"), name)
	}
	return obj.(*v1alpha1.Principal), nil
}
